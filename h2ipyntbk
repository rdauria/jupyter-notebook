#!/usr/bin/env python
"""In order to use the script you need to copy your SSH key to the target server
and also copy the server SSH public key (usually .ssh/id_rsa.pub) to .ssh/authorized_keys, 
so that the computing node can ssh passwordless to the login node"""

from subprocess import Popen, PIPE, call
import sys
import webbrowser
from getopt import getopt
import time
import os
import exceptions


import sys, getopt
import os
import exceptions

username = ''
username = str(username)
timeinhours = 2
timeinhours = int(timeinhours)
memoryingb = 1
memoryingb = int(memoryingb) 
numberofslots = 1
numberofslots = int(numberofslots)
port = 8789
port=int(port)
directory = ''
directory = str(directory)


def main(argv):
    global  username, timeinhours, memoryingb, numberofslots, port, directory
    try:
        opts, args = getopt.getopt(argv,"h:u:t:m:s:p:d:",["user=","time=","memory=","slots=","port=","dir="])
    except getopt.GetoptError:
        print 'Usage:'
        print '\n\t','test.py [-u <Hoffman2 user name>] [-t <time in hours>] [-m <memory in GB>] [-s <number of slots>] [-p <port>] [-d <dir>]','\n'
        print 'If no arguments are given to this script it is assumed that:'
        print '\t','your Hoffman2 user name is the same as on your client machine'
        print '\t','the time duration for your session is of 2 hours'
        print '\t','the memory per slot for your session is of 1GB'
        print '\t','the number of slots for your session is of 1'
        print '\t','the port on which the server is started is 8789'
        print '\t','the starting directory on Hoffman2 is your $HOME'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print 'test.py -u <Hoffman2 user name> -t <time in hours> [-p <port> [-d <dir>]'
            sys.exit()
        elif opt in ("-u", "--user"):
            username = arg
            username = str(username)
        elif opt in ("-t", "--time"):
            timeinhours = arg
            try:
                timeinhours=int(timeinhours)
            except exceptions.KeyError:
                print('Setting the time to 2 hours...')
                timeinhours = 2
        elif opt in ("-m", "--memory"):
            memoryingb = arg
            try:
                memoryingb=int(memoryingb)
            except exceptions.KeyError:
                print('Setting the memory to 1GB...')
                memoryingb = 1
        elif opt in ("-s", "--slots"):
            numberofslots = arg
            try:
                numberofslots=int(numberofslots)
            except exceptions.KeyError:
                print('Setting the number of slots to 1...')
                numberofslots = 1
        elif opt in ("-p", "--port"):
            port = arg
            try:
                port=int(port)
            except exceptions.KeyError:
                print('Setting the port to 2 8789...')
                port = 8789            
        elif opt in ("-d", "--dir"):
            directory = (arg,None)
            directory = str(directory)
        else:
            print 'Usage:'
            print '\n\t','test.py -u <Hoffman2 user name> -t <time in hours> [-p <port>] [-d <dir>]','\n'
            print 'If no arguments are given to this script it is assumed that:'
            print '\t','your Hoffman2 user name is the same as on your client machine'
            print '\t','the time duration for your session is of 2 hours'
            print '\t','the memory per slot for your session is of 1GB'
            print '\t','the number of slots for your session is of 1'
            print '\t','the port on which the server is started is 8789'
            print '\t','the starting directory on Hoffman2 is your $HOME'
            sys.exit(2)
            
    if not username:
        username = str(os.environ["USER"])
                     
    print 'Your Hoffman2 user name is ', username
    print 'The time in hours is ', timeinhours
    print 'The memory in GB per slots is ', memoryingb
    print 'The number of slots is ', numberofslots
    print 'The port is ', port
    if not directory:
        print 'The directory on Hoffman2 is $HOME'
    else:
        print 'The directory on Hoffman2 is', directory

if __name__ == "__main__":
   main(sys.argv[1:])

QSUB_TEMPLATE = os.environ.get("IPYNB_QSUB_TEMPLATE", "qrsh -l i,h_rt=%d:00:00,h_data=%dg -pe dc\* %d")


def readwhile(stream,func):
    while True:
        line = stream.readline()
        if line!='':
            print line[:-1]
            if func(line): break
        else:
            raise Exception("Disconnected unexpectedly.")

pqsub=Popen(['ssh','-t','-t','-4','%s@hoffman2.idre.ucla.edu' % username],stdin=PIPE,stdout=PIPE,stderr=PIPE)
pqsub.stdin.write((QSUB_TEMPLATE % (timeinhours,memoryingb,numberofslots))+"\n")
pqsub.stdin.write(('module load python/2.7.3')+"\n")
pqsub.stdin.write('echo HOSTNAME=`hostname`\n')

def gethostname(line):
    global hostname
    if line.startswith('HOSTNAME'):
        hostname = line.split('=')[1].strip()
        return True

readwhile(pqsub.stdout, gethostname)

if directory: 
    pqsub.stdin.write('cd %s\n'%directory)
    pqsub.stdin.write('echo CD\n')
    readwhile(pqsub.stdout, lambda line: line.startswith('CD'))
    
pqsub.stdin.write('ipython notebook --port=%s\n'%port)
readwhile(pqsub.stdout, lambda line: line.find('NotebookApp')>0)


tunnel = ['ssh','-4', '-t', '-Y', '%s@hoffman2.idre.ucla.edu' % username, '-L', '%s:localhost:%s'%(port,port), 'ssh', '-t', '-Y', hostname, '-L', '%s:localhost:%s'%(port,port)]
print ' '.join(tunnel)
ptunnel = Popen(tunnel,stdout=PIPE,stdin=PIPE)
ptunnel.stdin.write('echo TUNNEL\n')
readwhile(ptunnel.stdout,lambda line: line.startswith('TUNNEL'))

webbrowser.open('http://localhost:%s'%port)

print "Succesfully opened notebook!"
print "Kill this process to end your notebook connection."
time.sleep(timeinhours*3600)

pqsub.kill()
ptunnel.kill()
 
print("Succesfully cleaned up connections.")


